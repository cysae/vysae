input MeetingInput {
  id: ID,
  start: String!,
  end: String!,
  agreements: [AgreementInput]
}
input AgreementInput {
  id: ID,
  name: String!,
  votes: [VoteInput]
}
input VoteInput {
  id: ID
  result: Int!
}
input VoteWithAgreementId {
	agreementId: ID!
	vote: VoteInput!
}

type Mutation {
  createCompany(
    name: String!
  ): Company!
  createMeeting(
    companyId: ID!,
    meeting: MeetingInput!
  ): Meeting!
	createVotesForAgreements(
    votesWithAgreementId: [VoteWithAgreementId!]!
  ): [Agreement!]!
}

type Query {
  getCompany(id: ID!): Company
  getMeeting(id: ID!): Meeting
  getShareholder: Shareholder
  queryMeetingDocx: Docx
}

type Company {
  id: ID!
  name: String
  shareholders: [Shareholder]
  meetings: [Meeting]
}

type Shareholder {
  id: String!
  name: String
  companies: [Company]
}

type Meeting {
  id: ID!
  start: String!
  end: String!
  agreements: [Agreement]
}

type Agreement {
  id: ID!
  name: String!
  votes: [Vote]
}

type Vote {
  id: ID!
  result: Int!
}

type Docx {
  url: String!
}

schema {
  query: Query,
  mutation: Mutation
}
