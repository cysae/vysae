type Agreement {
  agreementId: ID!
  name: String!
  votes: [Vote]
}
input AgreementInput {
  agreementId: ID,
  name: String!,
  votes: [VoteInput]
}

type Company {
  companyId: ID!
  name: String
  placeOfBusiness: String
  nif: String
  shareIntervals(
    limit: Int
    nextToken: String
  ): CompanyShareIntervalConnection
  shareholders(
    limit: Int
    nextToken: String
  ): CompanyShareholderConnection
  myShareholders: [Shareholder]
  meetings(
    limit: Int
    nextToken: String
  ): CompanyMeetingConnection
}
type CompanyMeetingConnection {
  items: [Meeting]
  nextToken: String
}
type CompanyShareholderConnection {
  items: [Shareholder]
  nextToken: String
}
type CompanyShareIntervalConnection {
  items: [CompanyShareInterval]
  nextToken: String
}

type CompanyShareInterval {
  companyId: ID!
  end: Int!
  start: Int!
  value: Float
  voteWeight: Float
}
input CompanyShareIntervalInput {
  companyId: ID!
  end: Int!
  start: Int!
  value: Float
  voteWeight: Float
}

type Docx {
  url: String!
}

type Meeting {
  meetingId: ID!
  start: String!
  end: String!
  agreements: [Agreement]
}

input MeetingInput {
  meetingId: ID,
  start: String!,
  end: String!,
  agreements: [AgreementInput]
}

type Mutation {
  createCompany(
    name: String!
  ): Company!
  updateCompany(
    companyId: ID!
    name: String!
    placeOfBusiness: String!
    nif: String!
  ): Company!
  createUser(
    username: String!
    email: String!
    phone_number: String!
  ): User!
  createCompanyShareInterval( companyShareInterval: CompanyShareIntervalInput! ) : CompanyShareInterval!
  updateCompanyShareInterval(
    currentStart: Int!
    companyShareInterval: CompanyShareIntervalInput!
  ) : CompanyShareInterval!
  deleteCompanyShareInterval( companyId: ID!, start: Int! ): CompanyShareInterval!
  createShareholder(
    companyId: ID!
    name: String!
  ): Shareholder!
  createShareholderShareInterval( shareholderShareInterval: ShareholderShareIntervalInput! ) : ShareholderShareInterval!
  updateShareholderShareInterval(
    currentStart: Int!
    shareholderShareInterval: ShareholderShareIntervalInput!
  ) : ShareholderShareInterval!
  deleteShareholderShareInterval( shareholderId: ID! companyId: ID! ): ShareholderShareInterval!
  linkShareholderWithUser(
    shareholderId: ID!
    user: UserInput!
  ): User!
  createMeeting(
    companyId: ID!
    meeting: MeetingInput!
  ): Meeting!
	createVote(
    vote: VoteInput!
  ): Vote!
}

type Shareholder {
  shareholderId: ID!
  companyId: String!
  userId: String
  name: String
  shareIntervals: ShareholderShareIntervalConnection
}
type ShareholderUserConnection {
  items: [User]
  nextToken: String
}
type ShareholderShareIntervalConnection {
  items: [ShareholderShareInterval]
  nextToken: String
}

type ShareholderShareInterval {
  companyId: ID!
  shareholderId: ID!
  end: Int!
  start: Int!
}
input ShareholderShareIntervalInput {
  companyId: ID!
  shareholderId: ID!
  end: Int!
  start: Int!
}

type Query {
  getCompany(companyId: ID!): Company
  getMeeting(id: ID!): Meeting
  getUser: User!
  queryMeetingDocx: Docx
}

type User {
  userId: ID!
  email: String!
  password: String!
  phone_number: String!
  username: String!
  companies(
    limit: Int
    nextToken: String
  ): UserCompanyConnection
}

input UserInput {
  username: String!
  email: String!
  phone_number: String!
}

type UserCompanyConnection {
  items: [Company]
  nextToken: String
}

type UserShareholderConnection {
  items: [Shareholder]
  nextToken: String
}

type Vote {
  agreementId: String!
  shareholderId: String!
  result: Int!
}
input VoteInput {
  agreementId: String!
  shareholderId: String!
  result: Int!
}

schema {
  query: Query,
  mutation: Mutation
}
