input MeetingInput {
  id: String,
  start: String!,
  end: String!,
  agreements: [AgreementInput]!
}
input AgreementInput {
  id: String,
  name: String!,
  votes: [VoteInput]
}
input VoteInput {
  id: String
  result: Int!
}

type Mutation {
  createCompany(
    name: String
  ): Company!
  mutateMeeting(
    companyId: String!,
    meeting: MeetingInput!
  ): Meeting!
  mutateAgreement(
    meetingId: String!,
    agreement: AgreementInput!
  ): Agreement!
  mutateVote(
    agreementId: String!,
    vote: VoteInput!
  ): Vote!
}

type Query {
  queryCompany(id: String!): Company
  queryMeeting(id: String!): Meeting
  queryShareholder(id: String!): Shareholder
  queryMeetingDocx: Docx
}

type Company {
  id: String!
  name: String
  shareholders: [Shareholder]
  meetings: [Meeting]
}

type Shareholder {
  id: String!
  name: String
  companies: [Company]
}

type Meeting {
  id: String!
  start: String!
  end: String!
  agreements: [Agreement]
}

type Agreement {
  id: String!
  name: String!
  votes: [Vote]
}

type Vote {
  id: String!
  result: Int!
}

type Docx {
  url: String!
}

schema {
  query: Query,
  mutation: Mutation
}
