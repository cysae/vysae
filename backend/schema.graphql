type Agreement {
  id: ID!
  name: String!
  votes: [Vote]
}
input AgreementInput {
  id: ID,
  name: String!,
  votes: [VoteInput]
}

type Company {
  companyId: ID!
  name: String
  shareholders: [Shareholder]
  meetings: [Meeting]
}

type CompanyShareholderConnection {
  items: [Shareholder]
  nextToken: String
}

type Docx {
  url: String!
}

type Meeting {
  id: ID!
  start: String!
  end: String!
  agreements: [Agreement]
}

input MeetingInput {
  id: ID,
  start: String!,
  end: String!,
  agreements: [AgreementInput]
}

type Mutation {
  createCompany(
    name: String!
  ): Company!
  createUser(
    username: String!
    email: String!
    phone_number: String!
  ): User!
  createShareholder(
    companyId: ID!
    name: String!
  ): Shareholder!
  createMeeting(
    companyId: ID!
    meeting: MeetingInput!
  ): Meeting!
	createVotesForAgreements(
    votesWithAgreementId: [VoteWithAgreementId!]!
  ): [Agreement!]!
}

type Shareholder {
  shareholderId: ID!
  name: String
  companies: [Company]
}


type Query {
  getCompany(companyId: ID!): Company
  getMeeting(id: ID!): Meeting
  getUser: User!
  queryMeetingDocx: Docx
}

type User {
  userId: ID!
  email: String!
  password: String!
  phone_number: String!
  username: String!
  companies(
    limit: Int
    nextToken: String
  ): UserCompanyConnection
}

type UserCompanyConnection {
  items: [Company]
  nextToken: String
}

type UserShareholderConnection {
  items: [Shareholder]
  nextToken: String
}

type Vote {
  id: ID!
  result: Int!
}

input VoteInput {
  id: ID
  result: Int!
}
input VoteWithAgreementId {
	agreementId: ID!
	vote: VoteInput!
}

schema {
  query: Query,
  mutation: Mutation
}
