service: vysaeBackend

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-appsync-plugin

custom:
  serverless-offline:
    port: 4000
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: true
  #     seed: true
  #   seed:
  #     test:
  #       sources:
  #         - table: Vysae
  #           sources: [seedData/vysae.json]
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      packagePath: './package.json'
    packager: 'npm'
  appSync:
    name: Vysae
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: eu-west-1
      defaultAction: ALLOW
      userPoolId: eu-west-1_MUEHMQ2R2
    mappingTemplatesLocation: "./mapping-templates"
    mappingTemplates:
      - dataSource: VoteTable 
        type: Agreement
        field: votes
        request: "Agreement-votes-request.vm"
        response: "Agreement-votes-response.vm"
      - dataSource: MeetingTable
        type: Company
        field: meetings
        request: "Company-meetings-request.vm"
        response: "Company-meetings-response.vm"
      - dataSource: ShareholderTable
        type: Company
        field: myShareholders
        request: "Company-myShareholders-request.vm"
        response: "Company-myShareholders-response.vm"
      - dataSource: CompanyShareIntervalTable
        type: Company
        field: shareIntervals
        request: "Company-shareIntervals-request.vm"
        response: "Company-shareIntervals-response.vm"
      - dataSource: ShareholderTable
        type: Company
        field: shareholders
        request: "Company-shareholders-request.vm"
        response: "Company-shareholders-response.vm"
      - dataSource: AgreementTable
        type: Meeting
        field: agreements
        request: "Meeting-agreements-request.vm"
        response: "Meeting-agreements-response.vm"
      - dataSource: CompanyTable
        type: Query
        field: getCompany
        request: "QueryGetCompany-request.vm"
        response: "QueryGetCompany-response.vm"
      - dataSource: meetingDocx
        type: Query
        field: queryMeetingDocx
        request: "queryMeetingDocx-request.txt"
        response: "queryMeetingDocx-response.txt"
      - dataSource: UserTable
        type: Query
        field: getUser
        request: "QueryGetUser-request.vm"
        response: "QueryGetUser-response.vm"
      - dataSource: UserCompanyConnectionTable
        type: User
        field: companies
        request: "User-companies-request.vm"
        response: "User-companies-response.vm"
      - dataSource: CompanyTable
        type: UserCompanyConnection
        field: items
        request: "UserCompanyConnection-items-request.vm"
        response: "UserCompanyConnection-items-response.vm"
      - dataSource: CompanyTable
        type: Mutation
        field: createCompany
        request: "MutationCreateCompany-request.vm"
        response: "MutationCreateCompany-response.vm"
      - dataSource: MeetingTable
        type: Mutation
        field: createMeeting
        request: "MutationCreateMeeting-request.vm"
        response: "MutationCreateMeeting-response.vm"
      - dataSource: CompanyTable
        type: Mutation
        field: updateCompany
        request: "MutationUpdateCompany-request.vm"
        response: "MutationUpdateCompany-response.vm"
      - dataSource: CompanyShareIntervalTable
        type: Mutation
        field: createCompanyShareInterval
        request: "MutationCreateCompanyShareInterval-request.vm"
        response: "MutationCreateCompanyShareInterval-response.vm"
      - dataSource: CompanyShareIntervalTable
        type: Mutation
        field: updateCompanyShareInterval
        request: "MutationUpdateCompanyShareInterval-request.vm"
        response: "MutationUpdateCompanyShareInterval-response.vm"
      - dataSource: ShareholderTable
        type: Mutation
        field: createShareholder
        request: "MutationCreateShareholder-request.vm"
        response: "MutationCreateShareholder-response.vm"
      - dataSource: ShareholderShareIntervalTable
        type: Mutation
        field: createShareholderShareInterval
        request: "MutationCreateShareholderShareInterval-request.vm"
        response: "MutationCreateShareholderShareInterval-response.vm"
      - dataSource: ShareholderShareIntervalTable
        type: Mutation
        field: updateShareholderShareInterval
        request: "MutationUpdateShareholderShareInterval-request.vm"
        response: "MutationUpdateShareholderShareInterval-response.vm"
      - dataSource: ShareholderShareIntervalTable
        type: Mutation
        field: deleteShareholderShareInterval
        request: "MutationDeleteShareholderShareInterval-request.vm"
        response: "MutationDeleteShareholderShareInterval-response.vm"
      - dataSource: createUser 
        type: Mutation
        field: createUser
        request: "MutationCreateUser-request.vm"
        response: "MutationCreateUser-response.vm"
      - dataSource: linkShareholderWithUser
        type: Mutation
        field: linkShareholderWithUser
        request: "MutationLinkShareholderWithUser-request.vm"
        response: "MutationLinkShareholderWithUser-response.vm"
      - dataSource: VoteTable 
        type: Mutation
        field: createVote
        request: "MutationCreateVote-request.vm"
        response: "MutationCreateVote-response.vm"
      - dataSource: CompanyShareIntervalTable
        type: Mutation
        field: deleteCompanyShareInterval
        request: "MutationDeleteCompanyShareInterval-request.vm"
        response: "MutationDeleteCompanyShareInterval-response.vm"
      - dataSource: ShareholderShareIntervalTable
        type: Shareholder
        field: shareIntervals
        request: "Shareholder-shareIntervals-request.vm"
        response: "Shareholder-shareIntervals-response.vm"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: AgreementTable
        description: "Agreement table"
        config:
          tableName: { Ref: "VysaeAgreementTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: CompanyTable
        description: "Company table"
        config:
          tableName: { Ref: "VysaeCompanyTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: MeetingTable
        description: "Meeting table"
        config:
          tableName: { Ref: "VysaeMeetingTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: CompanyShareIntervalTable
        description: "Company shareinterval table"
        config:
          tableName: { Ref: "VysaeCompanyShareIntervalTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: ShareholderTable
        description: "Shareholder table"
        config:
          tableName: { Ref: "VysaeShareholderTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: ShareholderShareIntervalTable
        description: "Shareholder share intervals table"
        config:
          tableName: { Ref: "VysaeShareholderShareIntervalTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: VoteTable
        description: "Vote table"
        config:
          tableName: { Ref: "VysaeVoteTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: UserTable
        description: "User table"
        config:
          tableName: { Ref: "VysaeUserTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AMAZON_DYNAMODB
        name: UserCompanyConnectionTable
        description: "UserCompanyConnection table"
        config:
          tableName: { Ref: "VysaeUserCompanyConnectionTable" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: meetingDocx
        description: "get Docxpresso URL for convening a meeting"
        config:
          lambdaFunctionArn: { Fn::GetAtt: [MeetingDocxLambdaFunction, Arn] }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Lambda-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: createUser
        description: "create User ( Cognito & DynamoDB )"
        config:
          lambdaFunctionArn: { Fn::GetAtt: [CreateUserLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: linkShareholderWithUser
        description: "create User ( Cognito & DynamoDB )"
        config:
          lambdaFunctionArn: { Fn::GetAtt: [LinkShareholderWithUserLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

functions:
  meetingDocx:
    environment:
      DOCX_API_KEY: $(file(./config.js):docxAPIKEY)
    handler: handler.meetingDocx
    events:
      - http:
          path: meeting/docx
          method: get 
  conveneMeeting:
    environment:
      DOCX_API_KEY: $(file(./config.js):docxAPIKEY)
    handler: handler.conveneMeeting
    events:
      - http:
          path: meeting/convene
          method: post
  createUser:
    handler: handler.createUser
    role: DynamoDBServiceRole
  linkShareholderWithUser:
    handler: handler.linkShareholderWithUser
    role: DynamoDBServiceRole

resources:
  Resources:
    VysaeAgreementTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeAgreement
        AttributeDefinitions:
          - AttributeName: agreementId 
            AttributeType: S
          - AttributeName: meetingId 
            AttributeType: S
        KeySchema:
          - AttributeName: agreementId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: Meeting
            KeySchema:
              - AttributeName: meetingId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    VysaeCompanyTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeCompany
        AttributeDefinitions:
          - AttributeName: companyId 
            AttributeType: S
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    VysaeMeetingTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeMeeting
        AttributeDefinitions:
          - AttributeName: meetingId 
            AttributeType: S
          - AttributeName: companyId 
            AttributeType: S
        KeySchema:
          - AttributeName: meetingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: Company
            KeySchema:
              - AttributeName: companyId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    VysaeCompanyShareIntervalTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeCompanyShareInterval
        AttributeDefinitions:
          - AttributeName: companyId 
            AttributeType: S
          - AttributeName: start
            AttributeType: N
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
          - AttributeName: start
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    VysaeShareholderTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeShareholder
        AttributeDefinitions:
          - AttributeName: companyId 
            AttributeType: S
          - AttributeName: shareholderId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: shareholderId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: Company
            KeySchema:
              - AttributeName: companyId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
          - IndexName: User
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: companyId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    VysaeShareholderShareIntervalTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeShareholderShareInterval
        AttributeDefinitions:
          - AttributeName: companyId
            AttributeType: S 
          - AttributeName: shareholderId
            AttributeType: S 
          - AttributeName: start
            AttributeType: N 
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
          - AttributeName: start
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: Shareholder
            KeySchema:
              - AttributeName: shareholderId
                KeyType: HASH
              - AttributeName: companyId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
          - IndexName: User
            KeySchema:
              - AttributeName: companyId
                KeyType: HASH
              - AttributeName: start
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    VysaeUserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeUser
        AttributeDefinitions:
          - AttributeName: userId 
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    VysaeUserCompanyConnectionTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeUserCompanyConnection
        AttributeDefinitions:
          - AttributeName: userCompanyConnectionId 
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: companyId
            AttributeType: S
        KeySchema:
          - AttributeName: userCompanyConnectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: User
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
          - IndexName: Company
            KeySchema:
              - AttributeName: companyId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    VysaeVoteTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: VysaeVote
        AttributeDefinitions:
          - AttributeName: agreementId
            AttributeType: S
          - AttributeName: shareholderId
            AttributeType: S
        KeySchema:
          - AttributeName: agreementId
            KeyType: HASH
          - AttributeName: shareholderId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Dynamo-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae*"
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae*/*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Vysae-AppSync-Lambda-ServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Vysae-AppSync-Lambda-ServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - "arn:aws:lambda:eu-west-1:037641059503:function:backend-dev-createUser"
                    - "arn:aws:lambda:eu-west-1:037641059503:function:backend-dev-linkShareholderWithUser"
    DynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Vysae-Lambda-ServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "Vysae-DynamoDB-ServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:Scan"

                  Resource:
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae*"
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae*/*"
          - PolicyName: "Vysae-Logs-ServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "arn:aws:logs:eu-west-1:037641059503:log-group:/aws/lambda/backend-dev-createUser:*"
                    - "arn:aws:logs:eu-west-1:037641059503:log-group:/aws/lambda/backend-dev-linkShareholderWithUser:*"
          - PolicyName: "Vysae-SES-ServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "ses:SendEmail"
                  Resource:
                    - "arn:aws:ses:eu-west-1:037641059503:identity/*"
