service: backend

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-appsync-plugin

custom:
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Vysae
            sources: [seedData/vysae.json]
  appSync:
    name: Vysae
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: eu-west-1
      defaultAction: ALLOW
      userPoolId: eu-west-1_MUEHMQ2R2
    mappingTemplatesLocation: "./mapping-templates"
    mappingTemplates:
      - dataSource: Vysae
        type: Mutation
        field: createCompany
        request: "createCompany-request.txt"
        response: "createCompany-response.txt"
      - dataSource: Vysae
        type: Query
        field: queryCompany
        request: "queryCompany-request.txt"
        response: "queryCompany-response.txt"
      - dataSource: Vysae
        type: Company
        field: shareholders
        request: "company-shareholders-request.txt"
        response: "company-shareholders-response.txt"
      - dataSource: Vysae
        type: Company
        field: meetings
        request: "company-meetings-request.txt"
        response: "company-meetings-response.txt"
      - dataSource: Vysae
        type: Query
        field: queryShareholder
        request: "queryShareholder-request.txt"
        response: "queryShareholder-response.txt"
      - dataSource: Vysae
        type: Shareholder
        field: companies
        request: "shareholder-companies-request.txt"
        response: "shareholder-companies-response.txt"
      - dataSource: Vysae
        type: Meeting
        field: agreements
        request: "meeting-agreements-request.txt"
        response: "meeting-agreements-response.txt"
      - dataSource: Vysae
        type: Mutation
        field: mutateAgreement
        request: "mutateAgreement-request.txt"
        response: "mutateAgreement-response.txt"
      - dataSource: Vysae
        type: Query
        field: queryMeeting
        request: "queryMeeting-request.txt"
        response: "queryMeeting-response.txt"
      - dataSource: Vysae
        type: Mutation
        field: createMeeting
        request: "MutationCreateMeeting-request.txt"
        response: "MutationCreateMeeting-response.txt"
      - dataSource: Vysae
        type: Agreement
        field: votes
        request: "agreement-votes-request.txt"
        response: "agreement-votes-response.txt"
      - dataSource: Vysae
        type: Mutation
        field: createVotes
        request: "MutationCreateVotes-request.txt"
        response: "MutationCreateVotes-response.txt"
      - dataSource: meetingDocx
        type: Query
        field: queryMeetingDocx
        request: "queryMeetingDocx-request.txt"
        response: "queryMeetingDocx-response.txt"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Vysae
        description: "Vysae table"
        config:
          tableName: { Ref: "Vysae" }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: meetingDocx
        description: "get Docxpresso URL for convening a meeting"
        config:
          lambdaFunctionArn: { Fn::GetAtt: [MeetingDocxLambdaFunction, Arn] }
          serviceRoleArn: "arn:aws:iam::${env:AWS_ACCOUNTID}:role/Lambda-${self:custom.appSync.serviceRole}"

functions:
  meetingDocx:
    environment:
      DOCX_API_KEY: $(file(./config.js):docxAPIKEY)
    handler: handler.meetingDocx
    events:
      - http:
          path: meeting/docx
          method: get 
  conveneMeeting:
    environment:
      DOCX_API_KEY: $(file(./config.js):docxAPIKEY)
    handler: handler.conveneMeeting
    events:
      - http:
          path: meeting/convene
          method: post

resources:
  Resources:
    Vysae:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Vysae
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3 
          WriteCapacityUnits: 3 
        GlobalSecondaryIndexes:
          - IndexName: GSI
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3 
              WriteCapacityUnits: 3 
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae"
                    - "arn:aws:dynamodb:eu-west-1:*:table/Vysae/*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - "arn:aws:lambda:eu-west-1:*:*"
