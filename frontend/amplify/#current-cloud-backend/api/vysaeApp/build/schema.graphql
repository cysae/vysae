type Mutation {
  createCompany(input: CreateCompanyInput!): Company
  updateCompany(input: UpdateCompanyInput!): Company
  deleteCompany(input: DeleteCompanyInput!): Company
  createCompanyUser(input: CreateCompanyUserInput!): CompanyUser
  updateCompanyUser(input: UpdateCompanyUserInput!): CompanyUser
  deleteCompanyUser(input: DeleteCompanyUserInput!): CompanyUser
  createShareInterval(input: CreateShareIntervalInput!): ShareInterval
  updateShareInterval(input: UpdateShareIntervalInput!): ShareInterval
  deleteShareInterval(input: DeleteShareIntervalInput!): ShareInterval
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Query {
  getCompany(id: ID!): Company
  listCompanys(filter: ModelCompanyFilterInput, limit: Int, nextToken: String): ModelCompanyConnection
  getShareInterval(id: ID!): ShareInterval
  listShareIntervals(filter: ModelShareIntervalFilterInput, limit: Int, nextToken: String): ModelShareIntervalConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
}

type Subscription {
  onCreateCompany: Company @aws_subscribe(mutations: ["createCompany"])
  onUpdateCompany: Company @aws_subscribe(mutations: ["updateCompany"])
  onDeleteCompany: Company @aws_subscribe(mutations: ["deleteCompany"])
  onCreateCompanyUser: CompanyUser @aws_subscribe(mutations: ["createCompanyUser"])
  onUpdateCompanyUser: CompanyUser @aws_subscribe(mutations: ["updateCompanyUser"])
  onDeleteCompanyUser: CompanyUser @aws_subscribe(mutations: ["deleteCompanyUser"])
  onCreateShareInterval: ShareInterval @aws_subscribe(mutations: ["createShareInterval"])
  onUpdateShareInterval: ShareInterval @aws_subscribe(mutations: ["updateShareInterval"])
  onDeleteShareInterval: ShareInterval @aws_subscribe(mutations: ["deleteShareInterval"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
}

type Company {
  id: ID!
  name: String!
  nif: String
  placeOfBusiness: String
  users(filter: ModelCompanyUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCompanyUserConnection
  shareIntervals(filter: ModelShareIntervalFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelShareIntervalConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCompanyConnection {
  items: [Company]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelCompanyFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  nif: ModelStringFilterInput
  placeOfBusiness: ModelStringFilterInput
  and: [ModelCompanyFilterInput]
  or: [ModelCompanyFilterInput]
  not: ModelCompanyFilterInput
}

input CreateCompanyInput {
  name: String!
  nif: String
  placeOfBusiness: String
}

input UpdateCompanyInput {
  id: ID!
  name: String
  nif: String
  placeOfBusiness: String
}

input DeleteCompanyInput {
  id: ID
}

type CompanyUser {
  id: ID!
  company: Company!
  user: User!
}

input CreateCompanyUserInput {
  companyUserCompanyId: ID
  companyUserUserId: ID
}

input UpdateCompanyUserInput {
  id: ID!
  companyUserCompanyId: ID
  companyUserUserId: ID
}

input DeleteCompanyUserInput {
  id: ID
}

type ShareInterval {
  id: ID!
  start: Int!
  end: Int!
  value: Float
  voteWeight: Float
}

type ModelShareIntervalConnection {
  items: [ShareInterval]
  nextToken: String
}

input ModelShareIntervalFilterInput {
  id: ModelIDFilterInput
  start: ModelIntFilterInput
  end: ModelIntFilterInput
  value: ModelFloatFilterInput
  voteWeight: ModelFloatFilterInput
  and: [ModelShareIntervalFilterInput]
  or: [ModelShareIntervalFilterInput]
  not: ModelShareIntervalFilterInput
}

input CreateShareIntervalInput {
  start: Int!
  end: Int!
  value: Float
  voteWeight: Float
  companyShareIntervalsId: ID
}

input UpdateShareIntervalInput {
  id: ID!
  start: Int
  end: Int
  value: Float
  voteWeight: Float
  companyShareIntervalsId: ID
}

input DeleteShareIntervalInput {
  id: ID
}

type User {
  id: ID!
  name: String
  companies(filter: ModelCompanyUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCompanyUserConnection
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  name: String
}

input UpdateUserInput {
  id: ID!
  name: String
}

input DeleteUserInput {
  id: ID
}

type ModelCompanyUserConnection {
  items: [CompanyUser]
  nextToken: String
}

input ModelCompanyUserFilterInput {
  id: ModelIDFilterInput
  and: [ModelCompanyUserFilterInput]
  or: [ModelCompanyUserFilterInput]
  not: ModelCompanyUserFilterInput
}
